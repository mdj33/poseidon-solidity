/// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0;
pragma abicoder v2;
import "hardhat/console.sol";
import "./Utils.sol";
import "./Operation.sol";

interface Poseidon2 {
  function poseidon(uint[1] calldata) external pure returns (uint);
}

interface _PoseidonT2 {
  function hash(uint[1] calldata) external pure returns (uint);
}

interface Poseidon3 {
  function poseidon(uint[2] calldata) external pure returns (uint);
}

interface _PoseidonT3 {
  function hash(uint[3] calldata) external pure returns (uint);
}

interface Poseidon4 {
  function poseidon(uint[3] calldata) external pure returns (uint);
}

interface _PoseidonT4 {
  function hash(uint[3] calldata) external pure returns (uint);
}

interface Poseidon5 {
  function poseidon(uint[4] calldata) external pure returns (uint);
}

interface _PoseidonT5 {
  function hash(uint[4] calldata) external pure returns (uint);
}

interface Poseidon6 {
  function poseidon(uint[5] calldata) external pure returns (uint);
}

interface _PoseidonT6 {
  function hash(uint[5] calldata) external pure returns (uint);
}

interface Poseidon7 {
  function poseidon(uint[6] calldata) external pure returns (uint);
}

interface _PoseidonT7 {
  function hash(uint[6] calldata) external pure returns (uint);
}

interface Poseidon8 {
  function poseidon(uint[7] calldata) external pure returns (uint);
}

interface _PoseidonT8 {
  function hash(uint[7] calldata) external pure returns (uint);
}

interface Poseidon9 {
  function poseidon(uint[8] calldata) external pure returns (uint);
}

interface _PoseidonT9 {
  function hash(uint[9] calldata) external pure returns (uint[9] memory);
}

contract Test {
  // Benchmark poseidon-solidity
  function benchmarkA2(address p, uint[1] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = _PoseidonT2(p).hash(inputs);
    console.log(g-gasleft());
    return r;
  }

  // Benchmark circomlibjs
  function benchmarkB2(address p, uint[1] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = Poseidon2(p).poseidon(inputs);
    console.log(g-gasleft());
    return r;
  }
  // Benchmark poseidon-solidity
//  function benchmarkA3(address p, uint[3] memory inputs) public view returns (uint) {
//    uint g = gasleft();
//    uint r = _PoseidonT3(p).hash(inputs);
//    console.log(g-gasleft());
//    return r;
//  }

    function benchmarkA3(address p, uint[3] memory inputs) public view returns (uint) {
      uint g = gasleft();
      uint256 r;
      uint256 LOW32bit = 0xFFFFFFFF;
      Operation.MerkleProof memory v = testGetMerkleProof_1();
      r=calcMerkleRoot(p,v.id&LOW32bit,v.subleaf,v.subPath);
      //need v.prefixLeaf=hash9(r)
      r=calcMerkleRoot(p,(v.id>>32)&LOW32bit,v.prefixLeaf,v.prefixPath);
      console.log(g-gasleft());
      return r;
    }

  // Benchmark circomlibjs
  function benchmarkB3(address p, uint[2] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = Poseidon3(p).poseidon(inputs);
    console.log(g-gasleft());
    return r;
  }
  // Benchmark poseidon-solidity
  function benchmarkA4(address p, uint[3] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = _PoseidonT4(p).hash(inputs);
    console.log(g-gasleft());
    return r;
  }

  // Benchmark circomlibjs
  function benchmarkB4(address p, uint[3] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = Poseidon4(p).poseidon(inputs);
    console.log(g-gasleft());
    return r;
  }
  // Benchmark poseidon-solidity
  function benchmarkA5(address p, uint[4] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = _PoseidonT5(p).hash(inputs);
    console.log(g-gasleft());
    return r;
  }

  // Benchmark circomlibjs
  function benchmarkB5(address p, uint[4] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = Poseidon5(p).poseidon(inputs);
    console.log(g-gasleft());
    return r;
  }
  // Benchmark poseidon-solidity
  function benchmarkA6(address p, uint[5] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = _PoseidonT6(p).hash(inputs);
    console.log(g-gasleft());
    return r;
  }

  // Benchmark circomlibjs
  function benchmarkB6(address p, uint[5] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = Poseidon6(p).poseidon(inputs);
    console.log(g-gasleft());
    return r;
  }
  // Benchmark poseidon-solidity
  function benchmarkA7(address p, uint[6] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = _PoseidonT7(p).hash(inputs);
    console.log(g-gasleft());
    return r;
  }

  // Benchmark circomlibjs
  function benchmarkB7(address p, uint[6] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = Poseidon7(p).poseidon(inputs);
    console.log(g-gasleft());
    return r;
  }
  // Benchmark poseidon-solidity
  function benchmarkA8(address p, uint[7] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = _PoseidonT8(p).hash(inputs);
    console.log(g-gasleft());
    return r;
  }

  // Benchmark circomlibjs
  function benchmarkB8(address p, uint[7] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint r = Poseidon8(p).poseidon(inputs);
    console.log(g-gasleft());
    return r;
  }
  // Benchmark poseidon-solidity
//  function benchmarkA9(address p, uint[9] memory inputs) public view returns (uint) {
//    uint g = gasleft();
//    uint[9] memory r = _PoseidonT9(p).hash(inputs);
//    console.log("gas:",g-gasleft());
//    return r[0];
//  }

  function benchmarkA9(address p, uint[9] memory inputs) public view returns (uint) {
    uint g = gasleft();
    uint256 rst;
    //    uint[9] memory r = _PoseidonT9(p).hash(inputs);

//    rst = calcPosition(p,getPackDatas(testGetPositionData_0()));
//    require(rst==2957128076351279434388242703909751233544629116438261291983673882748611530720,"fail");
    rst = calcPosition(p,getPackDatas(testGetPositionData_1()));
//    require(rst==12974717377303042861232329715143740197253867102030791079310942185675733458769,"fail");
//    rst = calcPosition(p,getPackDatas(testGetPositionData_2()));
//    require(rst==14014996742509345689869355097561091882190209319245468358926670738582873309823,"fail");
//      rst = calcPosition(p,getPackDatas(testGetPositionData_3()));
//      require(rst==14567965546688899612100782371264347865037157314878386332129528569117759487179,"fail");

//    rst = calcPosition(p,getPackDatas(testGetPositionData_4()));
//    require(rst==15466139230756033725830834965055317201161978150410620965718367364874869102468,"fail");

    console.log("gas:",g-gasleft());
    return rst;
  }

  // Benchmark circomlibjs
//  function benchmarkB9(address p, uint[8] memory inputs) public view returns (uint) {
//    uint g = gasleft();
//    uint r = Poseidon9(p).poseidon(inputs);
//    console.log(g-gasleft());
//    return r;
//  }

  function calcMerkleRoot(address addr,uint256 id,uint256 leaf, uint256[32] memory path) public view returns (uint256 root) {
    uint256 left = leaf;
    uint256 right = 0;
    for (uint8 i = 0; i < path.length; i++) {
      if (i > 0) {
        left = root;
      }
      right = path[i];

      if (id % 2 == 1) {
        root = hash2(addr,[right, left]);
      } else {
        root = hash2(addr,[left, right]);
      }
      id = id / 2;
    }
    return root;
  }

  function hash2(address p,uint256[2] memory inputs) public view returns (uint256) {
    return updateT3(p,inputs, Utils.initStatesT3());
  }

  function updateT3(
    address p,
    uint[2] memory inputs,
    uint[3] memory states
  ) public view returns (uint256) {
    states[1] = addmod(states[1], inputs[0], Operation.F);
    states[2] = addmod(states[2], inputs[1], Operation.F);
    return _PoseidonT3(p).hash(states);
  }



  function calcPosition(address p,uint256[] memory datas) public view returns (uint256) {
    require(datas.length % (8) == 0, 'wrong position data len');
//    for (uint8 i=0;i<datas.length;i++){
//      console.log("i",i);
//      console.log(datas[i]);
//    }
    uint256[8] memory inputs;
    uint256[9] memory newState = Utils.initStatesT9();
    for (uint i = 0; i < datas.length; i += (8)) {
      for (uint j = 0; j < 8; j++) {
        inputs[j] = datas[i + j];
      }
      newState = updateT9(p,inputs, newState);
    }
    console.log("datahash",newState[1]);
//    return halfStateHash(p,newState[1]);
    return 0;
  }

  function halfStateHash(address p,uint256 data) public view returns (uint256) {
    uint256 MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
    uint256 lo = data & MASK;
    uint256 hi = (data >> 128) & MASK;
    uint256[8] memory inputs = [lo, hi, 1, 0, 0, 0, 0, 0];
    uint256[9] memory rst = updateT9(p,inputs, Utils.initStatesT9());
    return rst[1];
  }

  function updateT9(
    address p,
    uint256[8] memory inputs,
    uint256[9] memory states
  ) public view returns (uint256[9] memory rst) {
    for (uint8 i = 0; i < 8; i++) {
      states[i + 1] = addmod(states[i + 1], inputs[i], Operation.F);
    }
    return _PoseidonT9(p).hash(states);
  }



  function testGetMerkleProof_0() public view returns (Operation.MerkleProof memory){
    Operation.MerkleProof memory v;
    v.id = 13579;
    v.subleaf=12974717377303042861232329715143740197253867102030791079310942185675733458769;
    v.treeRoot=15904253674308706878101321930117605011132775973755514615112369157033808222634;
    v.subRoot=278060538692421906019830328817107224094374479961673679293653050486027355754;
    v.subPath[0]=7296888194936240363382258110742907895951719735333879414446479919759712340874;
    v.subPath[1]=11406112501801942850611648160749331791236928780172853021798155702126581470451;
    v.subPath[2]=2426330477089951800967144423533259832670789935792635632207850378075109832458;
    v.subPath[3]=3158718816532162555738634913150750250134230271274145371324564753957923507883;
    v.subPath[4]=7117512665652546759381868623019332470943115008645226085613054714495026313735;
    v.subPath[5]=21783272431464614632115591973776328212874039907181929133152879794040329264390;
    v.subPath[6]=564651102955950801985390406289617406785835319278071561427586173045700976966;
    v.subPath[7]=17663806494845938024726295044121498704538907271797027836791005238205234448050;
    v.subPath[8]=13634825912185256946397847807994910692928188801723176340917787992369733310458;
    v.subPath[9]=8609465662407626379469370902427852394462602166479904118012785580994767829786;
    v.subPath[10]=15911711744200766286180944160346973799460557015648705545197535878303243587273;
    v.subPath[11]=1116190422419797054894771537263461346303067341695194281895853677072879864727;
    v.subPath[12]=19483822537678168628424543174713828809631785928947633565685800456411265594496;
    v.subPath[13]=14186987397897356380531620438703969447344764866260347781141989372935787887135;
    v.subPath[14]=3610237101591773701309819979606388242214226590065508986028594871826957410921;
    v.subPath[15]=11316333347876979688994641734664144885848991663128931922898933713154261411823;
    v.subPath[16]=3694047587969147665033237816858317776472576602902366209422510810988914863552;
    v.subPath[17]=13591359324419227359597515300190623774143885799952948584296770669718377819907;
    v.subPath[18]=3031375115552537704687555934193413915743551360917941742704630364207696705547;
    v.subPath[19]=4389213264643462342874944419734387835607970223804005049629260989907186987209;
    v.subPath[20]=5151827124931274803141063595301509195460537600380239868684479744006248394482;
    v.subPath[21]=19289290670010867569777423516896016326916676446466969116816723430226543597273;
    v.subPath[22]=19889861244155988546556199105892381013061435909471148030061083164982933129451;
    v.subPath[23]=3212794207222889815423990820471601189672986731977563322702896394246414317520;
    v.subPath[24]=14384686952889920495915979932111807420500902869475684838319525871593903898073;
    v.subPath[25]=20930703938301940589409287878271538310488919396870970641589016529965316742771;
    v.subPath[26]=3036094205540011695278291784648929890328349155496628965118170777994205666754;
    v.subPath[27]=6765577511734139720009307280750223786320946325015515479799919197349574605818;
    v.subPath[28]=8762389097035878451621364071443663045386974969243389842187458043920030675491;
    v.subPath[29]=12918562557769211897534894671871194394403408326407594089036854271632021285483;
    v.subPath[30]=4258626786306050047418828214357347649615948752455759207314322367975686189989;
    v.subPath[31]=21110962588084025427495486752912252758407551914025352580176655880118960074709;

    v.prefixLeaf=6369470775435296694187585634817815135950662423047668948283837248115859884531;
    v.prefixPath[0]=7296888194936240363382258110742907895951719735333879414446479919759712340874;
    v.prefixPath[1]=11406112501801942850611648160749331791236928780172853021798155702126581470451;
    v.prefixPath[2]=2426330477089951800967144423533259832670789935792635632207850378075109832458;
    v.prefixPath[3]=3158718816532162555738634913150750250134230271274145371324564753957923507883;
    v.prefixPath[4]=7117512665652546759381868623019332470943115008645226085613054714495026313735;
    v.prefixPath[5]=21783272431464614632115591973776328212874039907181929133152879794040329264390;
    v.prefixPath[6]=564651102955950801985390406289617406785835319278071561427586173045700976966;
    v.prefixPath[7]=17663806494845938024726295044121498704538907271797027836791005238205234448050;
    v.prefixPath[8]=13634825912185256946397847807994910692928188801723176340917787992369733310458;
    v.prefixPath[9]=8609465662407626379469370902427852394462602166479904118012785580994767829786;
    v.prefixPath[10]=15911711744200766286180944160346973799460557015648705545197535878303243587273;
    v.prefixPath[11]=1116190422419797054894771537263461346303067341695194281895853677072879864727;
    v.prefixPath[12]=19483822537678168628424543174713828809631785928947633565685800456411265594496;
    v.prefixPath[13]=14186987397897356380531620438703969447344764866260347781141989372935787887135;
    v.prefixPath[14]=3610237101591773701309819979606388242214226590065508986028594871826957410921;
    v.prefixPath[15]=11316333347876979688994641734664144885848991663128931922898933713154261411823;
    v.prefixPath[16]=3694047587969147665033237816858317776472576602902366209422510810988914863552;
    v.prefixPath[17]=13591359324419227359597515300190623774143885799952948584296770669718377819907;
    v.prefixPath[18]=3031375115552537704687555934193413915743551360917941742704630364207696705547;
    v.prefixPath[19]=4389213264643462342874944419734387835607970223804005049629260989907186987209;
    v.prefixPath[20]=5151827124931274803141063595301509195460537600380239868684479744006248394482;
    v.prefixPath[21]=19289290670010867569777423516896016326916676446466969116816723430226543597273;
    v.prefixPath[22]=19889861244155988546556199105892381013061435909471148030061083164982933129451;
    v.prefixPath[23]=3212794207222889815423990820471601189672986731977563322702896394246414317520;
    v.prefixPath[24]=14384686952889920495915979932111807420500902869475684838319525871593903898073;
    v.prefixPath[25]=20930703938301940589409287878271538310488919396870970641589016529965316742771;
    v.prefixPath[26]=3036094205540011695278291784648929890328349155496628965118170777994205666754;
    v.prefixPath[27]=6765577511734139720009307280750223786320946325015515479799919197349574605818;
    v.prefixPath[28]=8762389097035878451621364071443663045386974969243389842187458043920030675491;
    v.prefixPath[29]=12918562557769211897534894671871194394403408326407594089036854271632021285483;
    v.prefixPath[30]=4258626786306050047418828214357347649615948752455759207314322367975686189989;
    v.prefixPath[31]=21110962588084025427495486752912252758407551914025352580176655880118960074709;


    return v;
  }

  function testGetMerkleProof_1() public view returns (Operation.MerkleProof memory){
    Operation.MerkleProof memory v;
    v.id = (2<<32)+13579;

    v.subleaf=12974717377303042861232329715143740197253867102030791079310942185675733458769;

    v.subRoot=278060538692421906019830328817107224094374479961673679293653050486027355754;
    v.subPath[0]=7296888194936240363382258110742907895951719735333879414446479919759712340874;
    v.subPath[1]=11406112501801942850611648160749331791236928780172853021798155702126581470451;
    v.subPath[2]=2426330477089951800967144423533259832670789935792635632207850378075109832458;
    v.subPath[3]=3158718816532162555738634913150750250134230271274145371324564753957923507883;
    v.subPath[4]=7117512665652546759381868623019332470943115008645226085613054714495026313735;
    v.subPath[5]=21783272431464614632115591973776328212874039907181929133152879794040329264390;
    v.subPath[6]=564651102955950801985390406289617406785835319278071561427586173045700976966;
    v.subPath[7]=17663806494845938024726295044121498704538907271797027836791005238205234448050;
    v.subPath[8]=13634825912185256946397847807994910692928188801723176340917787992369733310458;
    v.subPath[9]=8609465662407626379469370902427852394462602166479904118012785580994767829786;
    v.subPath[10]=15911711744200766286180944160346973799460557015648705545197535878303243587273;
    v.subPath[11]=1116190422419797054894771537263461346303067341695194281895853677072879864727;
    v.subPath[12]=19483822537678168628424543174713828809631785928947633565685800456411265594496;
    v.subPath[13]=14186987397897356380531620438703969447344764866260347781141989372935787887135;
    v.subPath[14]=3610237101591773701309819979606388242214226590065508986028594871826957410921;
    v.subPath[15]=11316333347876979688994641734664144885848991663128931922898933713154261411823;
    v.subPath[16]=3694047587969147665033237816858317776472576602902366209422510810988914863552;
    v.subPath[17]=13591359324419227359597515300190623774143885799952948584296770669718377819907;
    v.subPath[18]=3031375115552537704687555934193413915743551360917941742704630364207696705547;
    v.subPath[19]=4389213264643462342874944419734387835607970223804005049629260989907186987209;
    v.subPath[20]=5151827124931274803141063595301509195460537600380239868684479744006248394482;
    v.subPath[21]=19289290670010867569777423516896016326916676446466969116816723430226543597273;
    v.subPath[22]=19889861244155988546556199105892381013061435909471148030061083164982933129451;
    v.subPath[23]=3212794207222889815423990820471601189672986731977563322702896394246414317520;
    v.subPath[24]=14384686952889920495915979932111807420500902869475684838319525871593903898073;
    v.subPath[25]=20930703938301940589409287878271538310488919396870970641589016529965316742771;
    v.subPath[26]=3036094205540011695278291784648929890328349155496628965118170777994205666754;
    v.subPath[27]=6765577511734139720009307280750223786320946325015515479799919197349574605818;
    v.subPath[28]=8762389097035878451621364071443663045386974969243389842187458043920030675491;
    v.subPath[29]=12918562557769211897534894671871194394403408326407594089036854271632021285483;
    v.subPath[30]=4258626786306050047418828214357347649615948752455759207314322367975686189989;
    v.subPath[31]=21110962588084025427495486752912252758407551914025352580176655880118960074709;

    v.prefixLeaf=6369470775435296694187585634817815135950662423047668948283837248115859884531;
    v.treeRoot=5437379514686321939489958684053841249583394622109109982086416250269250792786;
    v.prefixPath[0]=7296888194936240363382258110742907895951719735333879414446479919759712340874;
    v.prefixPath[1]=11406112501801942850611648160749331791236928780172853021798155702126581470451;
    v.prefixPath[2]=2426330477089951800967144423533259832670789935792635632207850378075109832458;
    v.prefixPath[3]=3158718816532162555738634913150750250134230271274145371324564753957923507883;
    v.prefixPath[4]=7117512665652546759381868623019332470943115008645226085613054714495026313735;
    v.prefixPath[5]=21783272431464614632115591973776328212874039907181929133152879794040329264390;
    v.prefixPath[6]=564651102955950801985390406289617406785835319278071561427586173045700976966;
    v.prefixPath[7]=17663806494845938024726295044121498704538907271797027836791005238205234448050;
    v.prefixPath[8]=13634825912185256946397847807994910692928188801723176340917787992369733310458;
    v.prefixPath[9]=8609465662407626379469370902427852394462602166479904118012785580994767829786;
    v.prefixPath[10]=15911711744200766286180944160346973799460557015648705545197535878303243587273;
    v.prefixPath[11]=1116190422419797054894771537263461346303067341695194281895853677072879864727;
    v.prefixPath[12]=19483822537678168628424543174713828809631785928947633565685800456411265594496;
    v.prefixPath[13]=14186987397897356380531620438703969447344764866260347781141989372935787887135;
    v.prefixPath[14]=3610237101591773701309819979606388242214226590065508986028594871826957410921;
    v.prefixPath[15]=11316333347876979688994641734664144885848991663128931922898933713154261411823;
    v.prefixPath[16]=3694047587969147665033237816858317776472576602902366209422510810988914863552;
    v.prefixPath[17]=13591359324419227359597515300190623774143885799952948584296770669718377819907;
    v.prefixPath[18]=3031375115552537704687555934193413915743551360917941742704630364207696705547;
    v.prefixPath[19]=4389213264643462342874944419734387835607970223804005049629260989907186987209;
    v.prefixPath[20]=5151827124931274803141063595301509195460537600380239868684479744006248394482;
    v.prefixPath[21]=19289290670010867569777423516896016326916676446466969116816723430226543597273;
    v.prefixPath[22]=19889861244155988546556199105892381013061435909471148030061083164982933129451;
    v.prefixPath[23]=3212794207222889815423990820471601189672986731977563322702896394246414317520;
    v.prefixPath[24]=14384686952889920495915979932111807420500902869475684838319525871593903898073;
    v.prefixPath[25]=20930703938301940589409287878271538310488919396870970641589016529965316742771;
    v.prefixPath[26]=3036094205540011695278291784648929890328349155496628965118170777994205666754;
    v.prefixPath[27]=6765577511734139720009307280750223786320946325015515479799919197349574605818;
    v.prefixPath[28]=8762389097035878451621364071443663045386974969243389842187458043920030675491;
    v.prefixPath[29]=12918562557769211897534894671871194394403408326407594089036854271632021285483;
    v.prefixPath[30]=4258626786306050047418828214357347649615948752455759207314322367975686189989;
    v.prefixPath[31]=21110962588084025427495486752912252758407551914025352580176655880118960074709;

    return v;
  }

  //less 8 data
  function testGetPositionData_0() public view returns (uint256[] memory data){
    data = new uint256[](5);

    data[0]=0x2439df2eafecdef08162460e81283457b4adf5d37e8e9d757897881fa30db041;
    data[1]=0x11a8324e56410dcf4d10315423eeed81441a3bfc4bf74de1b804dea5ae651ea0;
    data[2]=0x000000000000000000000000000000000000000000007ffffffffffffffd0001;
    //assets
    data[3]=0x000000000000000000000000000000017ffffffffffffffc7ffffffffffffffd;
    //timestap
    data[4]=0x0000000000000000000000000000000000000000000000000000000000000004;
    //root 2957128076351279434388242703909751233544629116438261291983673882748611530720
  }

  //just 7 data then  pad 1 flag to 8 data
  function testGetPositionData_1() public view returns (uint256[] memory data){
    data = new uint256[](7);
    data[0]=0x2439df2eafecdef08162460e81283457b4adf5d37e8e9d757897881fa30db041;
    data[1]=0x11a8324e56410dcf4d10315423eeed81441a3bfc4bf74de1b804dea5ae651ea0;
    //notice: the len change
    data[2]=0x000000000000000000000000000000000000000000007ffffffffffffffd0003;
    //assets
    data[3]=0x000000000000000000000000000000017ffffffffffffffc7ffffffffffffffd;
    data[4]=0x0000000000000000000000000000000280000000000000048000000000000003;
    data[5]=0x0000000000000000000000000000000380000000000000048000000000000003;
    //timestap
    data[6]=0x0000000000000000000000000000000000000000000000000000000000000004;
    //root 12974717377303042861232329715143740197253867102030791079310942185675733458769
  }

  //just 8 data
  function testGetPositionData_2() public view returns (uint256[] memory data){
    data = new uint256[](8);
    data[0]=0x2439df2eafecdef08162460e81283457b4adf5d37e8e9d757897881fa30db041;
    data[1]=0x11a8324e56410dcf4d10315423eeed81441a3bfc4bf74de1b804dea5ae651ea0;
    data[2]=0x000000000000000000000000000000000000000000007ffffffffffffffd0004;
    //assets
    data[3]=0x000000000000000000000000000000017ffffffffffffffc7ffffffffffffffd;
    data[4]=0x0000000000000000000000000000000280000000000000048000000000000003;
    data[5]=0x0000000000000000000000000000000380000000000000048000000000000003;
    data[6]=0x0000000000000000000000000000000480000000000000048000000000000003;
    //timestap
    data[7]=0x0000000000000000000000000000000000000000000000000000000000000004;
    //14014996742509345689869355097561091882190209319245468358926670738582873309823
  }

  //more than 8 data
  function testGetPositionData_3() public view returns (uint256[] memory data){
    data = new uint256[](9);
    data[0]=0x2439df2eafecdef08162460e81283457b4adf5d37e8e9d757897881fa30db041;
    data[1]=0x11a8324e56410dcf4d10315423eeed81441a3bfc4bf74de1b804dea5ae651ea0;
    data[2]=0x000000000000000000000000000000000000000000007ffffffffffffffd0005;
    //assets
    data[3]=0x000000000000000000000000000000017ffffffffffffffc7ffffffffffffffd;
    data[4]=0x0000000000000000000000000000000280000000000000048000000000000003;
    data[5]=0x0000000000000000000000000000000380000000000000048000000000000003;
    data[6]=0x0000000000000000000000000000000480000000000000048000000000000003;
    data[7]=0x0000000000000000000000000000000580000000000000048000000000000003;
    //timestap
    data[8]=0x0000000000000000000000000000000000000000000000000000000000000004;
    //14567965546688899612100782371264347865037157314878386332129528569117759487179
  }
  function testGetPositionData_4() public view returns (uint256[] memory data){
    data = new uint256[](10);
    data[0]=0x2439df2eafecdef08162460e81283457b4adf5d37e8e9d757897881fa30db041;
    data[1]=0x11a8324e56410dcf4d10315423eeed81441a3bfc4bf74de1b804dea5ae651ea0;
    data[2]=0x000000000000000000000000000000000000000000007ffffffffffffffd0006;
    //assets
    data[3]=0x000000000000000000000000000000017ffffffffffffffc7ffffffffffffffd;
    data[4]=0x0000000000000000000000000000000280000000000000048000000000000003;
    data[5]=0x0000000000000000000000000000000380000000000000048000000000000003;
    data[6]=0x0000000000000000000000000000000480000000000000048000000000000003;
    data[7]=0x0000000000000000000000000000000580000000000000048000000000000003;
    data[8]=0x0000000000000000000000000000000680000000000000048000000000000003;
    //timestap
    data[9]=0x0000000000000000000000000000000000000000000000000000000000000004;
    //15466139230756033725830834965055317201161978150410620965718367364874869102468
  }

  function getPackDatas(uint256[] memory data) public view returns (uint256[] memory){
    uint256 T = 9;

    //pubkeylen+1(balance+assetlenV)+assetLen+timestamp+finalFlag
    uint256 realLen=data.length+1;

    uint256 rem=realLen%(T-1);
    if (rem!=0){
      rem=(T-1)-rem;
    }
    //totalLen should align with T-1
    uint256 totalLen=realLen+rem;
    console.log("reallen=",realLen);
    console.log("rem=",rem);
    uint256[] memory datas = new uint256[](totalLen);
    for (uint8 i=0;i<data.length;i++){
      datas[i] = data[i];
    }
    //pad 1 for final flag
    datas[realLen-1] = 1;
    for (uint256 i=realLen;i<totalLen;i++){
      datas[i]=0;
    }

    return datas;
  }
}
